<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/DATA_MIGRATION_SUMMARY.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DATA_MIGRATION_SUMMARY.md" />
              <option name="updatedContent" value="# Data Migration Summary&#10;&#10;## Extracted Hardcoded Data&#10;&#10;All hardcoded data from the React components has been successfully extracted and exported to JSON files:&#10;&#10;### 1. Navigation Data (`/src/data/navigation.json`)&#10;- Header navigation items (Overview, Monitoring, Alerts, Analytics)&#10;- Icon mappings for each navigation item&#10;&#10;### 2. User Profile Data (`/src/data/user.json`)&#10;- User information (Forest Officer)&#10;- Application branding (Forester app name and description)&#10;- Avatar and logo styling configurations&#10;&#10;### 3. Sensor Data (`/src/data/sensors.json`)&#10;- 4 monitoring sensors with coordinates, types, values, and status&#10;- Sensor type definitions with icons and units&#10;- Temperature, humidity, air quality, and wind speed sensors&#10;&#10;### 4. Forest Data (`/src/data/forests.json`)&#10;- 4 national forests with boundaries, areas, and health status&#10;- Yellowstone, Olympic, Sequoia, and Redwood national forests&#10;- Geographic boundary coordinates for map rendering&#10;&#10;### 5. Alert Data (`/src/data/alerts.json`)&#10;- Active alerts with locations, severity levels, and messages&#10;- Alert type definitions and classifications&#10;- Fire risk, deforestation, and pest activity alerts&#10;&#10;### 6. Analytics Data (`/src/data/analytics.json`)&#10;- Analytics zones for visualization on maps&#10;- Growth rate zones and monitoring areas&#10;- Zone-specific metrics and descriptions&#10;&#10;### 7. Statistics Data (`/src/data/stats.json`)&#10;- Overview, monitoring, alerts, and analytics statistics&#10;- Performance metrics and health scores&#10;&#10;## Components Updated&#10;&#10;### 1. `InteractiveMap.tsx`&#10;- Now imports sensor, alert, forest, and analytics data from JSON files&#10;- Removed hardcoded arrays for sensors, alerts, and forest boundaries&#10;- Uses dynamic data rendering for all map elements&#10;&#10;### 2. `Header.tsx`&#10;- Imports navigation items from navigation.json&#10;- Uses user and app data from user.json&#10;- Dynamic icon rendering based on JSON configuration&#10;&#10;### 3. `Sidebar.tsx`&#10;- **STATS OVERLAY FUNCTIONALITY COMPLETELY REMOVED**&#10;- Now only displays forest selection interface&#10;- Uses forest data from forests.json&#10;- Clean, streamlined interface without statistics&#10;&#10;### 4. `page.tsx` (Main Dashboard)&#10;- **REMOVED StatsOverlay component import and rendering**&#10;- Simplified layout focusing on map and forest selection&#10;&#10;## Stats Overlay Removal&#10;&#10;The stats overlay functionality has been completely removed from:&#10;- Main dashboard page (no StatsOverlay component)&#10;- Sidebar component (no stats display)&#10;- All associated statistics rendering logic&#10;&#10;The application now has a clean, data-driven architecture with all hardcoded values externalized to JSON files, making it easy to modify data without touching the component code." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Header.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { Trees, Bell, Settings, User, Search } from 'lucide-react';&#10;import { clsx } from 'clsx';&#10;&#10;// Import JSON data&#10;import navigationData from '@/data/navigation.json';&#10;import userData from '@/data/user.json';&#10;&#10;interface HeaderProps {&#10;  activeView: 'overview' | 'monitoring' | 'alerts' | 'analytics';&#10;  setActiveView: (view: 'overview' | 'monitoring' | 'alerts' | 'analytics') =&gt; void;&#10;}&#10;&#10;export function Header({ activeView, setActiveView }: HeaderProps) {&#10;  const navItems = navigationData.navItems;&#10;&#10;  const getIcon = (iconName: string) =&gt; {&#10;    switch (iconName) {&#10;      case 'Trees':&#10;        return Trees;&#10;      case 'Search':&#10;        return Search;&#10;      case 'Bell':&#10;        return Bell;&#10;      case 'Settings':&#10;        return Settings;&#10;      default:&#10;        return Trees;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;header className=&quot;bg-white border-b border-gray-200 px-6 py-4 shadow-sm&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        {/* Logo and Title */}&#10;        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;          &lt;div className={`${userData.app.logo.bgColor} p-2 rounded-lg`}&gt;&#10;            &lt;Trees className={`h-6 w-6 ${userData.app.logo.textColor}`} /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;h1 className=&quot;text-xl font-bold text-gray-900&quot;&gt;{userData.app.name}&lt;/h1&gt;&#10;            &lt;p className=&quot;text-sm text-gray-500&quot;&gt;{userData.app.description}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Navigation */}&#10;        &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;          {navItems.map((item) =&gt; {&#10;            const Icon = getIcon(item.icon);&#10;            return (&#10;              &lt;button&#10;                key={item.id}&#10;                onClick={() =&gt; setActiveView(item.id as any)}&#10;                className={clsx(&#10;                  'flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors',&#10;                  activeView === item.id&#10;                    ? 'bg-green-100 text-green-700'&#10;                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'&#10;                )}&#10;              &gt;&#10;                &lt;Icon className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;span&gt;{item.label}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            );&#10;          })}&#10;        &lt;/nav&gt;&#10;&#10;        {/* User Profile */}&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;button className=&quot;p-2 text-gray-400 hover:text-gray-600 rounded-md hover:bg-gray-100&quot;&gt;&#10;            &lt;Bell className=&quot;h-5 w-5&quot; /&gt;&#10;          &lt;/button&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;div className={`${userData.user.avatar.bgColor} p-2 rounded-full`}&gt;&#10;              &lt;User className={`h-4 w-4 ${userData.user.avatar.textColor}`} /&gt;&#10;            &lt;/div&gt;&#10;            &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;{userData.user.name}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/header&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { Trees, Bell, Settings, User, Search } from 'lucide-react';&#10;import { clsx } from 'clsx';&#10;&#10;// Import JSON data&#10;import navigationData from '@/data/navigation.json';&#10;import userData from '@/data/user.json';&#10;&#10;interface HeaderProps {&#10;  activeView: 'overview' | 'monitoring' | 'alerts' | 'analytics';&#10;  setActiveView: (view: 'overview' | 'monitoring' | 'alerts' | 'analytics') =&gt; void;&#10;}&#10;&#10;export function Header({ activeView, setActiveView }: HeaderProps) {&#10;  const navItems = navigationData.navItems;&#10;&#10;  const getIcon = (iconName: string) =&gt; {&#10;    switch (iconName) {&#10;      case 'Trees':&#10;        return Trees;&#10;      case 'Search':&#10;        return Search;&#10;      case 'Bell':&#10;        return Bell;&#10;      case 'Settings':&#10;        return Settings;&#10;      default:&#10;        return Trees;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;header className=&quot;bg-white border-b border-gray-200 px-6 py-4 shadow-sm&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        {/* Logo and Title */}&#10;        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;          &lt;div className={`${userData.app.logo.bgColor} p-2 rounded-lg`}&gt;&#10;            &lt;Trees className={`h-6 w-6 ${userData.app.logo.textColor}`} /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;h1 className=&quot;text-xl font-bold text-gray-900&quot;&gt;{userData.app.name}&lt;/h1&gt;&#10;            &lt;p className=&quot;text-sm text-gray-500&quot;&gt;{userData.app.description}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Navigation */}&#10;        &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;          {navItems.map((item) =&gt; {&#10;            const Icon = getIcon(item.icon);&#10;            return (&#10;              &lt;button&#10;                key={item.id}&#10;                onClick={() =&gt; setActiveView(item.id as 'overview' | 'monitoring' | 'alerts' | 'analytics')}&#10;                className={clsx(&#10;                  'flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors',&#10;                  activeView === item.id&#10;                    ? 'bg-green-100 text-green-700'&#10;                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'&#10;                )}&#10;              &gt;&#10;                &lt;Icon className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;span&gt;{item.label}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            );&#10;          })}&#10;        &lt;/nav&gt;&#10;&#10;        {/* User Profile */}&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;button className=&quot;p-2 text-gray-400 hover:text-gray-600 rounded-md hover:bg-gray-100&quot;&gt;&#10;            &lt;Bell className=&quot;h-5 w-5&quot; /&gt;&#10;          &lt;/button&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;div className={`${userData.user.avatar.bgColor} p-2 rounded-full`}&gt;&#10;              &lt;User className={`h-4 w-4 ${userData.user.avatar.textColor}`} /&gt;&#10;            &lt;/div&gt;&#10;            &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;{userData.user.name}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/header&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/data/sensors.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/data/sensors.json" />
              <option name="updatedContent" value="{&#10;  &quot;sensors&quot;: [&#10;    {&#10;      &quot;id&quot;: 1,&#10;      &quot;lat&quot;: 44.5,&#10;      &quot;lng&quot;: -110.3,&#10;      &quot;type&quot;: &quot;temperature&quot;,&#10;      &quot;value&quot;: &quot;22°C&quot;,&#10;      &quot;status&quot;: &quot;normal&quot;,&#10;      &quot;lastUpdated&quot;: &quot;2 min ago&quot;&#10;    },&#10;    {&#10;      &quot;id&quot;: 2,&#10;      &quot;lat&quot;: 44.6,&#10;      &quot;lng&quot;: -110.4,&#10;      &quot;type&quot;: &quot;humidity&quot;,&#10;      &quot;value&quot;: &quot;68%&quot;,&#10;      &quot;status&quot;: &quot;normal&quot;,&#10;      &quot;lastUpdated&quot;: &quot;2 min ago&quot;&#10;    },&#10;    {&#10;      &quot;id&quot;: 3,&#10;      &quot;lat&quot;: 44.45,&#10;      &quot;lng&quot;: -110.35,&#10;      &quot;type&quot;: &quot;air_quality&quot;,&#10;      &quot;value&quot;: &quot;Good&quot;,&#10;      &quot;status&quot;: &quot;normal&quot;,&#10;      &quot;lastUpdated&quot;: &quot;2 min ago&quot;&#10;    },&#10;    {&#10;      &quot;id&quot;: 4,&#10;      &quot;lat&quot;: 44.55,&#10;      &quot;lng&quot;: -110.45,&#10;      &quot;type&quot;: &quot;wind&quot;,&#10;      &quot;value&quot;: &quot;12 km/h&quot;,&#10;      &quot;status&quot;: &quot;normal&quot;,&#10;      &quot;lastUpdated&quot;: &quot;2 min ago&quot;&#10;    }&#10;  ],&#10;  &quot;sensorTypes&quot;: [&#10;    {&#10;      &quot;type&quot;: &quot;temperature&quot;,&#10;      &quot;name&quot;: &quot;Temperature&quot;,&#10;      &quot;unit&quot;: &quot;°C&quot;,&#10;      &quot;icon&quot;: &quot;Thermometer&quot;&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;humidity&quot;,&#10;      &quot;name&quot;: &quot;Humidity&quot;,&#10;      &quot;unit&quot;: &quot;%&quot;,&#10;      &quot;icon&quot;: &quot;Droplets&quot;&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;air_quality&quot;,&#10;      &quot;name&quot;: &quot;Air Quality&quot;,&#10;      &quot;unit&quot;: &quot;AQI&quot;,&#10;      &quot;icon&quot;: &quot;MapPin&quot;&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;wind&quot;,&#10;      &quot;name&quot;: &quot;Wind Speed&quot;,&#10;      &quot;unit&quot;: &quot;km/h&quot;,&#10;      &quot;icon&quot;: &quot;Wind&quot;&#10;    }&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>